services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: always
    depends_on:
      - gateway
    networks:
      - msa_network

  gateway:
    build: 
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./gateway:/app
    environment:
      - PYTHONUNBUFFERED=1
      - ACCOUNT_SERVICE_URL=${ACCOUNT_SERVICE_URL}
      - ASSESSMENT_SERVICE_URL=${ASSESSMENT_SERVICE_URL}
      - CHATBOT_SERVICE_URL=${CHATBOT_SERVICE_URL}
      - MONITORING_SERVICE_URL=${MONITORING_SERVICE_URL}
      - NORMAL_SERVICE_URL=${NORMAL_SERVICE_URL}
      - REGULATION_SERVICE_URL=${REGULATION_SERVICE_URL}
      - REPORT_SERVICE_URL=${REPORT_SERVICE_URL}
      - SHARING_SERVICE_URL=${SHARING_SERVICE_URL}
      - SOLUTION_SERVICE_URL=${SOLUTION_SERVICE_URL}
    restart: always
    depends_on:
      - account-service
      - assessment-service
      - chatbot-service
      - monitoring-service
      - normal-service
      - regulation-service
      - report-service
      - sharing-service
      - solution-service
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - msa_network

  account-service:
    build: ./service/account-service
    ports:
      - "8001:8001"
    volumes:
      - ./service/account-service/app:/app/app
      - ./service/account-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    env_file:
      - ./service/account-service/.env
    networks:
      - msa_network

  assessment-service:
    build: ./service/assessment-service
    ports:
      - "8002:8002"
    volumes:
      - ./service/assessment-service/app:/app/app
      - ./service/assessment-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    env_file:
      - ./service/assessment-service/.env
    networks:
      - msa_network

  chatbot-service:
    build: ./service/chatbot-service
    ports:
      - "8003:8003"
    volumes:
      - ./service/chatbot-service/app:/app/app
      - ./service/chatbot-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  monitoring-service:
    build: ./service/monitoring-service
    ports:
      - "8004:8004"
    volumes:
      - ./service/monitoring-service/app:/app/app
      - ./service/monitoring-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  normal-service:
    build: ./service/normal-service
    ports:
      - "8005:8005"
    volumes:
      - ./service/normal-service/app:/app/app
      - ./service/normal-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  regulation-service:
    build: ./service/regulation-service
    ports:
      - "8006:8006"
    volumes:
      - ./service/regulation-service/app:/app/app
      - ./service/regulation-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  report-service:
    build: ./service/report-service
    ports:
      - "8007:8007"
    volumes:
      - ./service/report-service/app:/app/app
      - ./service/report-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  sharing-service:
    build: ./service/sharing-service
    ports:
      - "8008:8008"
    volumes:
      - ./service/sharing-service/app:/app/app
      - ./service/sharing-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  solution-service:
    build: ./service/solution-service
    ports:
      - "8009:8009"
    volumes:
      - ./service/solution-service/app:/app/app
      - ./service/solution-service/requirements.txt:/app/requirements.txt
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - msa_network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=eripotter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - msa_network
    restart: always

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - msa_network
    restart: always

volumes:
  postgres_data:

networks:
  msa_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16